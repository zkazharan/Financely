package financely;

import java.awt.Color;
import java.sql.Connection;
import java.sql.SQLException;
import javaswingdev.chart.ModelPieChart;
import javaswingdev.chart.PieChart;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Kelompok 3 RPL 4A
 * - Afwa Afini
 * - Azka Ahmad Azharan
 * - Hanisah Fildza Annafisah
 * - Innaka Dylee
 */
public class Analytics extends javax.swing.JFrame {
    
    private int userID;

    public Analytics(int userID) {
        initComponents();
        
        this.userID = userID;
        
        this.show_table_transaction_history_all();
        getContentPane().setBackground(new Color(255, 255, 255));
        pieChart1.setChartType(PieChart.PeiChartType.DEFAULT);
        pieChart2.setChartType(PieChart.PeiChartType.DEFAULT);
        show_data_expenses();
        show_data_incomes();
//        this.show_table_income_per_category();
//        this.show_table_expense_per_category();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TableHistoryScroll = new javax.swing.JScrollPane();
        TableHistory = new javax.swing.JTable();
        SelectGroupHistory = new javax.swing.JComboBox<>();
        pieChart1 = new javaswingdev.chart.PieChart();
        pieChart2 = new javaswingdev.chart.PieChart();
        BackAnalytics = new javax.swing.JLabel();
        UIAnalytics = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Financely");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TableHistory.setFont(new java.awt.Font("Inter", 0, 12)); // NOI18N
        TableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        TableHistoryScroll.setViewportView(TableHistory);

        getContentPane().add(TableHistoryScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 380, 350));

        SelectGroupHistory.setFont(new java.awt.Font("Inter", 0, 12)); // NOI18N
        SelectGroupHistory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Day", "Month", "Year" }));
        SelectGroupHistory.setToolTipText("");
        SelectGroupHistory.setBorder(null);
        SelectGroupHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectGroupHistoryActionPerformed(evt);
            }
        });
        getContentPane().add(SelectGroupHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 178, 140, -1));
        getContentPane().add(pieChart1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 140, 250, 220));
        getContentPane().add(pieChart2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 370, 250, 220));

        BackAnalytics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackAnalyticsMouseClicked(evt);
            }
        });
        getContentPane().add(BackAnalytics, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 80, 40));

        UIAnalytics.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UIComponent/Analytics (1).png"))); // NOI18N
        getContentPane().add(UIAnalytics, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 660));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SelectGroupHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectGroupHistoryActionPerformed
        String group = (String) SelectGroupHistory.getSelectedItem();
        
        if (group == "All") {
            this.show_table_transaction_history_all();
        } else if (group == "Day") {
            this.show_table_transaction_history_day();
        } else if (group == "Month") {
            this.show_table_transaction_history_month();
        } else if (group == "Year") {
            this.show_table_transaction_history_year();
        }
    }//GEN-LAST:event_SelectGroupHistoryActionPerformed

    private void BackAnalyticsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackAnalyticsMouseClicked
        Dashboard DashboardPage = new Dashboard(userID);
        DashboardPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BackAnalyticsMouseClicked
   
    private void show_table_transaction_history_all() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Type");
        table.addColumn("Date");
        table.addColumn("Notes");
        table.addColumn("Categories");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM TransactionHistoryAll WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(3), result.getString(4), result.getString(5), result.getString(6)
                });
            }
            
            TableHistory.setModel(table);
            
            TableColumnModel columnModel = TableHistory.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(30);
            
            TableHistory.getTableHeader().setResizingAllowed(false);
            TableHistory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void show_data_expenses(){
        try {
            String pieQuery = "SELECT Categories, SUM(Amount) AS TotalAmount FROM dataexpenses WHERE userID = ? GROUP BY Categories, userID";
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            java.sql.PreparedStatement s = Vconn.prepareStatement(pieQuery);
            s.setInt(1, userID);
            java.sql.ResultSet r = s.executeQuery();
            
            int index = 0;
            while (r.next()){
                String categories = r.getString("Categories");
                double values = r.getDouble("TotalAmount");
                pieChart1.addData(new ModelPieChart(categories, values, getColor(index++)));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void show_data_incomes(){
        try {
            String pieIncomes = "SELECT Categories, SUM(Amount) AS TotalAmount FROM dataincomes WHERE userID = ? GROUP BY Categories, userID";
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            java.sql.PreparedStatement s = Vconn.prepareStatement(pieIncomes);
            s.setInt(1, userID);
            java.sql.ResultSet r = s.executeQuery();
            
            int index = 0;
            while (r.next()){
                String categories = r.getString("Categories");
                double values = r.getDouble("TotalAmount");
                pieChart2.addData(new ModelPieChart(categories, values, getColor(index++)));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private Color getColor(int index){
        Color[] color = new Color[]{new Color(255, 102, 102), new Color(58, 55, 227), new Color(206, 215, 33),  new Color(230, 115, 63), new Color(210, 180, 63)};
        return color[index];
    }
    
    private void show_table_transaction_history_day() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Type");
        table.addColumn("Date");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM TransactionHistoryDay WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(3), result.getString(4)
                });
            }
            
            TableHistory.setModel(table);
            TableHistory.getTableHeader().setResizingAllowed(false);
            TableHistory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void show_table_transaction_history_month() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Type");
        table.addColumn("Month");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM TransactionHistoryMonth WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(4), result.getString(5)
                });
            }
            
            TableHistory.setModel(table);
            TableHistory.getTableHeader().setResizingAllowed(false);
            TableHistory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void show_table_transaction_history_year() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Type");
        table.addColumn("Year");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM TransactionHistoryYear WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(3), result.getString(4)
                });
            }
            
            TableHistory.setModel(table);
            TableHistory.getTableHeader().setResizingAllowed(false);
            TableHistory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void show_table_income_per_category() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Categories");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM IncomePerCategory WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(3)
                });
            }
            
//            TableIncomesCategory.setModel(table); 
//            TableIncomesCategory.getTableHeader().setResizingAllowed(false);
//            TableIncomesCategory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    private void show_table_expense_per_category() {
        DefaultTableModel table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        table.addColumn("No.");
        table.addColumn("Categories");
        table.addColumn("Amount");
        
        try {
            java.sql.Connection Vconn = (Connection)DBconnect.configDB();
            
            String query = "SELECT * FROM ExpensePerCategory WHERE userID = ?";
            java.sql.PreparedStatement statement = Vconn.prepareStatement(query);
            
            statement.setInt(1, this.userID);
            java.sql.ResultSet result = statement.executeQuery();
            
            int counter = 1;
            
            while (result.next()){
                table.addRow(new Object[]{
                    counter++, result.getString(2), result.getString(3)
                });
            }
            
//            TableExpensesCategory.setModel(table); 
//            TableExpensesCategory.getTableHeader().setResizingAllowed(false);
//            TableExpensesCategory.getTableHeader().setReorderingAllowed(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackAnalytics;
    private javax.swing.JComboBox<String> SelectGroupHistory;
    private javax.swing.JTable TableHistory;
    private javax.swing.JScrollPane TableHistoryScroll;
    private javax.swing.JLabel UIAnalytics;
    private javaswingdev.chart.PieChart pieChart1;
    private javaswingdev.chart.PieChart pieChart2;
    // End of variables declaration//GEN-END:variables
}
